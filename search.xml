<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/27/Android-OpenGLES3%E7%BB%98%E5%9B%BE---%E7%BB%98%E5%88%B63D%E5%88%86%E5%BD%A2/"/>
      <url>/2022/06/27/Android-OpenGLES3%E7%BB%98%E5%9B%BE---%E7%BB%98%E5%88%B63D%E5%88%86%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<p>几年前写了一篇<a href="https://www.jianshu.com/p/e81aacb365bc">Android SurfaceView 多线程绘图</a>，多线程计算分形图案绘制到屏幕上，这种并行运算更适合用GPU处理。目前手机GPU有几百乃至上千个ALU运算单元，简单地说，相当于一个几百核的处理器，那么处理速度也就比CPU开启多线程快多了。</p><p>那么我们用OpenGL来实现一下，效果如下：</p><iframe src="https://upload-images.jianshu.io/upload_images/1896166-8e3c68a5f0f26530.gif?imageMogr2/auto-orient/strip" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><p><img src="https://upload-images.jianshu.io/upload_images/1896166-8e3c68a5f0f26530.gif?imageMogr2/auto-orient/strip" alt="7mgto-qwaih.gif"></p><p>绘制的这个分形有点像煤气灶 (-_ -)!。不过3D效果很明显，动画也非常流畅，远远不是CPU运算所能比的（有点模糊是录屏设置的，真机效果还是很清晰的）。这已经不是“鸟枪换炮”了，简直就是“鸟枪换火箭”！</p><p>来看看代码实现。</p><h2 id="Activity相关"><a href="#Activity相关" class="headerlink" title="Activity相关"></a>Activity相关</h2><p>在 GLActivity 中添加 GLSurfaceView，设置 Renderer 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GLActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    GLSurfaceView glSurfaceView;</span><br><span class="line">    OurCamera ourCamera;</span><br><span class="line">    BaseRender render;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        glSurfaceView = <span class="keyword">new</span> <span class="title class_">GLSurfaceView</span>(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(glSurfaceView);</span><br><span class="line"></span><br><span class="line">        glSurfaceView.setEGLContextClientVersion(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        glSurfaceView.setRenderer(render = <span class="keyword">new</span> <span class="title class_">FractorRender</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Renderer-实现"><a href="#Renderer-实现" class="headerlink" title="Renderer 实现"></a>Renderer 实现</h2><p>创建一个401*401的顶点数组，分配Native内存，绑定VAO和VBO。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> vertices[] = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">401</span> * <span class="number">401</span> * <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> program;</span><br><span class="line">FloatBuffer vertexBuffer;</span><br><span class="line"><span class="type">int</span>[] vao;</span><br><span class="line"></span><br><span class="line">IntBuffer intBuffer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> -<span class="number">200</span>; i &lt;= <span class="number">200</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> -<span class="number">200</span>; j &lt;= <span class="number">200</span>; j++) &#123;</span><br><span class="line">            vertices[p] = i;</span><br><span class="line">            vertices[p + <span class="number">1</span>] = j;</span><br><span class="line">            p += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    program = ShaderUtils.loadProgramFractor();</span><br><span class="line">    <span class="comment">//分配内存空间,每个浮点型占4字节空间</span></span><br><span class="line">    vertexBuffer = ByteBuffer.allocateDirect(vertices.length * <span class="number">4</span>)</span><br><span class="line">            .order(ByteOrder.nativeOrder())</span><br><span class="line">            .asFloatBuffer();</span><br><span class="line">    <span class="comment">//传入指定的坐标数据</span></span><br><span class="line">    vertexBuffer.put(vertices);</span><br><span class="line">    vertexBuffer.position(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    vao = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line">    glGenVertexArrays(<span class="number">1</span>, vao, <span class="number">0</span>);</span><br><span class="line">    glBindVertexArray(vao[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] vbo = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line">    glGenBuffers(<span class="number">1</span>, vbo, <span class="number">0</span>);</span><br><span class="line">    glBindBuffer(GL_ARRAY_BUFFER, vbo[<span class="number">0</span>]);</span><br><span class="line">    glBufferData(GL_ARRAY_BUFFER, vertices.length * <span class="number">4</span>, vertexBuffer, GL_STATIC_DRAW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将顶点坐标按三角形条带方式排列，使用 GL_TRIANGLE_STRIP 方式绘制，效率更高。(如果直接用点方式绘制，点之间空隙太大，无法展示3D图形效果)。<br>总共有400 * 400个方格子，每个方格子绘制两个三角形，也就是每一帧绘制32万个三角形。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 用GL_TRIANGLE_STRIP方式把平面上所有点转化成一个三角形条带</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] strip(<span class="type">int</span> w, <span class="type">int</span> h) &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">reverse</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; h - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; w; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (reverse) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> j * w + w - <span class="number">1</span> - i;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    list.add(p);</span><br><span class="line">                    list.add(p + w);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(p + w);</span><br><span class="line">                list.add(p);</span><br><span class="line">                <span class="keyword">if</span> (i == w - <span class="number">1</span>) &#123;</span><br><span class="line">                    list.add(p);</span><br><span class="line">                    list.add(p + w);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> j * w + i;</span><br><span class="line">                list.add(p);</span><br><span class="line">                list.add(p + w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse = !reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        a[i] = list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">glDrawElements(GL_TRIANGLE_STRIP, vertices.length, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>分形计算参数 <code>float[] c</code>绘制每一帧后自动改变，用<code>glUniform2fv</code>方法传给Shader，形成动画效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">float</span>[] c = &#123;<span class="number">0.225f</span>, <span class="number">0.01f</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDrawFrame</span><span class="params">(GL10 gl)</span> &#123;</span><br><span class="line">        <span class="comment">// Clear the color buffer</span></span><br><span class="line">        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the program object</span></span><br><span class="line">        glUseProgram(program);</span><br><span class="line"></span><br><span class="line">        c[<span class="number">0</span>] += <span class="number">0.0001f</span>;</span><br><span class="line"><span class="comment">//        c[1] += 0.00001f;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">loc</span> <span class="operator">=</span> glGetUniformLocation(program, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        glUniform2fv(loc, <span class="number">1</span>, c, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Shader实现"><a href="#Shader实现" class="headerlink" title="Shader实现"></a>Shader实现</h2><p>顶点Shader：shader_fractor_v.glsl</p><p>根据顶点位置和Render传进来的分形参数 <code>c</code> 计算分形迭代数 <code>k</code></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec2</span> c;</span><br><span class="line"></span><br><span class="line"><span class="type">vec2</span> z = vPosition / <span class="number">200.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; k &lt; <span class="number">63</span>; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z.x * z.x + z.y * z.y &gt; <span class="number">4.0</span>) <span class="keyword">break</span>;</span><br><span class="line">    z = mul(z,z) + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上找一个热度渐变色数组<code>colors</code>，根据 <code>k</code>大小选择不同颜色，并转换成 <code>vec3</code> 格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 热度渐变色 64</span></span><br><span class="line">const <span class="type">int</span>[] colors = <span class="type">int</span>[](-<span class="number">16777216</span>,-<span class="number">16318464</span>,-<span class="number">15859712</span>,-<span class="number">15400960</span>,-<span class="number">14876672</span>,-<span class="number">14417920</span>,-<span class="number">13959168</span>,-<span class="number">13500416</span>,-<span class="number">12976128</span>,-<span class="number">12517376</span>,-<span class="number">12058624</span>,-<span class="number">11599872</span>,-<span class="number">11075584</span>,-<span class="number">10158080</span>,-<span class="number">9240576</span>,-<span class="number">8323072</span>,-<span class="number">7405568</span>,-<span class="number">6488064</span>,-<span class="number">5570560</span>,-<span class="number">4653056</span>,-<span class="number">3735552</span>,-<span class="number">2818048</span>,-<span class="number">1900544</span>,-<span class="number">983040</span>,-<span class="number">65536</span>,-<span class="number">61440</span>,-<span class="number">57088</span>,-<span class="number">52736</span>,-<span class="number">48640</span>,-<span class="number">44288</span>,-<span class="number">39936</span>,-<span class="number">35840</span>,-<span class="number">31488</span>,-<span class="number">27136</span>,-<span class="number">23040</span>,-<span class="number">18688</span>,-<span class="number">14336</span>,-<span class="number">13312</span>,-<span class="number">12032</span>,-<span class="number">11008</span>,-<span class="number">9728</span>,-<span class="number">8704</span>,-<span class="number">7424</span>,-<span class="number">6144</span>,-<span class="number">5120</span>,-<span class="number">3840</span>,-<span class="number">2816</span>,-<span class="number">1536</span>,-<span class="number">256</span>,-<span class="number">235</span>,-<span class="number">214</span>,-<span class="number">193</span>,-<span class="number">171</span>,-<span class="number">150</span>,-<span class="number">129</span>,-<span class="number">108</span>,-<span class="number">86</span>,-<span class="number">65</span>,-<span class="number">44</span>,-<span class="number">23</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>);</span><br><span class="line">layout (location = <span class="number">0</span>) in vec2 vPosition;</span><br><span class="line"></span><br><span class="line">out vec3 aColor;</span><br><span class="line"></span><br><span class="line">vec3 <span class="title function_">generateColor</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> colors[k];</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> (c &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> (c &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> c &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">return</span> vec3(<span class="type">float</span>(r)/<span class="number">255.0f</span>, <span class="type">float</span>(g)/<span class="number">255.0f</span>, <span class="type">float</span>(b)/<span class="number">255.0f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>片段着色器：shader_fractor_f.glsl<br>顶点着色器将颜色传给片段着色器展示即可</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 300 es</span></span><br><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"><span class="keyword">in</span> <span class="type">vec3</span> aColor;</span><br><span class="line"><span class="keyword">out</span> <span class="type">vec4</span> fragColor;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">     fragColor = <span class="type">vec4</span>(aColor, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>完整代码在<a href="https://github.com/rome753/SurfacePaint">SurfacePaint项目</a>的opengles3模块的fractal中</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test_my_blog</title>
      <link href="/2022/04/27/test-my-blog/"/>
      <url>/2022/04/27/test-my-blog/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/27/hello-world/"/>
      <url>/2022/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
